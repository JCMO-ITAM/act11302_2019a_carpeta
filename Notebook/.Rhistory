knitr::opts_chunk$set(echo = TRUE)
if(!require("repmis")){install.packages("repmis")}
library("repmis")
data <- source_data("https://github.com/JCMO-ITAM/Data4Analysis/blob/master/d4a_allstateclaim_data.csv?raw=true")
data <- as.data.frame(data)
colnames(data)
data <- data[which(data$Calendar_Year==2005),]
d4a_allstateclaim_data <- read.csv("~/Google.Drive/Classroom/ACT11302/act11302_2019a/act11302_2019a_carpeta/Notebook/Datos/d4a_allstateclaim_data.csv")
View(d4a_allstateclaim_data)
if(!requireNamespace("BiocManager", quietly = TRUE)){install.packages("BiocManager")}
if(!requireNamespace("Devtools", quietly = TRUE)){install.packages("Devtools")}
if(!require('impute')){BiocManager::install("impute", version = "3.8")}
if(!require('PMA')){install.packages("PMA")}
library("impute")
library("PMA")
# Generate 3 data sets so that first 25 features are correlated across
# the data sets...
u <- matrix(rnorm(50),ncol=1)
v1 <- matrix(c(rep(.5,25),rep(0,75)),ncol=1)
v2 <- matrix(c(rep(1,25),rep(0,25)),ncol=1)
v3 <- matrix(c(rep(.5,25),rep(0,175)),ncol=1)
x1 <- u%*%t(v1) + matrix(rnorm(50*100),ncol=100)
x2 <- u%*%t(v2) + matrix(rnorm(50*50),ncol=50)
x3 <- u%*%t(v3) + matrix(rnorm(50*200),ncol=200)
xlist <- list(x1, x2, x3)
# Run MultiCCA.permute w/o specifying values of tuning parameters to
# try.
# The function will choose the lambda for the ordered data set.
# Then permutations will be used to select optimal sum(abs(w)) for
# standard data sets.
# We assume that x1 is standard, x2 is ordered, x3 is standard:
perm.out <- MultiCCA.permute(xlist, type=c("standard", "ordered",
"standard"))
print(perm.out)
plot(perm.out)
out <- MultiCCA(xlist, type=c("standard", "ordered", "standard"),
penalty=perm.out$bestpenalties, ncomponents=2, ws=perm.out$ws.init)
print(out)
# Or if you want to specify tuning parameters by hand:
# this time, assume all data sets are standard:
perm.out <- MultiCCA.permute(xlist, type="standard",
penalties=cbind(c(1.1,1.1,1.1),c(2,3,4),c(5,7,10)), ws=perm.out$ws.init)
print(perm.out)
plot(perm.out)
# Making use of the fact that the features are ordered:
out <- MultiCCA(xlist, type="ordered", penalty=.6)
par(mfrow=c(3,1))
PlotCGH(out$ws[[1]], chrom=rep(1,ncol(x1)))
PlotCGH(out$ws[[2]], chrom=rep(2,ncol(x2)))
PlotCGH(out$ws[[3]], chrom=rep(3,ncol(x3)))
if(!require('cluster')){install.packages("cluster")}
library("cluster")
if(!require('MASS')){install.packages("MASS")}
library("MASS")
if(!require('smacof')){devtools::install_github("cran/smacof")}
library("smacof")
install.packages("smacof")
